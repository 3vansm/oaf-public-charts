apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-kobo
  namespace: {{ .Release.Namespace }}
data:
  kpi_uwsgi.ini: |
    [uwsgi]

    # load apps in each worker instead of the master, this also increases 
    # memory consumption
    # lazy-apps = true

    # log requests with a 5xx response
    log-5xx = true
    
    # log requests with a 4xx response
    log-4xx = true

    # disable request logging
    disable-logging = false

    # exit if no app can be loaded
    need-app = true
    
    # desired to ensure all options are known
    strict = false

    # number of threads for each worker
    threads = 2

    # cleanup sockets on worker reload
    vacuum = true

    # directory structure
    chdir       = $(KPI_SRC_DIR)
    # logto       = $(KPI_LOGS_DIR)/uwsgi.log

    # Run the application at a non-root URL path, e.g. http://hostname/KPI_PREFIX.
    # See http://uwsgi-docs.readthedocs.org/en/latest/Nginx.html#hosting-multiple-apps-in-the-same-process-aka-managing-script-name-and-path-info
    # This supersedes `wsgi-file = $(KPI_SRC_DIR)/kobo/wsgi.py`.
    manage-script-name = true
    mount              = $(KPI_PREFIX)=$(KPI_SRC_DIR)/kobo/wsgi.py


    # process related settings
    master              = true
    harakiri            = $(KPI_UWSGI_HARAKIRI)
    worker-reload-mercy = $(KPI_UWSGI_WORKER_RELOAD_MERCY)

    # monitoring (use with `uwsgitop :1717`, for example)
    stats = :1818
    memory-report = false

    # Overrideable default of 2 uWSGI processes.
    if-env = KPI_UWSGI_WORKERS_COUNT
    workers = %(_)
    endif =
    if-not-env = KPI_UWSGI_WORKERS_COUNT
    workers = 2
    endif =

    # # activate cheaper mode
    # if-env = KPI_UWSGI_CHEAPER_WORKERS_COUNT
    # cheaper-algo = spare
    # cheaper = %(_)
    # cheaper-initial = %(_)
    # cheaper-step = 2
    # cheaper-overload = 1
    # endif =

    # # stop spawning new workers if total memory consumption grows too large
    # if-env = KPI_UWSGI_CHEAPER_RSS_LIMIT_SOFT
    # cheaper-rss-limit-soft = %(_)
    # endif =
    # if-not-env = KPI_UWSGI_CHEAPER_RSS_LIMIT_SOFT
    # cheaper-rss-limit-soft = %(2 * 1024 * 1024 * 1024)
    # endif =

    # respawn processes after serving KPI_UWSGI_MAX_REQUESTS requests (default 5000)
    if-env = KPI_UWSGI_MAX_REQUESTS
    max-requests = %(_)
    max-requests-delta = 2
    endif =

    # respawn workers when their memory consumption grows too large
    if-env = KPI_UWSGI_RELOAD_ON_RSS_MB
    reload-on-rss = %(_)
    endif =
    if-not-env = KPI_UWSGI_RELOAD_ON_RSS_MB
    reload-on-rss = 1024
    endif =

    # respawn workers only after they have run for at leat min-worker-lifetime
    if-env = KPI_UWSGI_MIN_WORKER_LIFTIME
    min-worker-lifetime = %(_)
    endif =

    socket          = 0.0.0.0:8003
    buffer-size     = 32768
    listen          = @(/proc/sys/net/core/somaxconn)

    #uid             = wsgi
    #gid             = wsgi
    die-on-term     = true

    # uWSGI does not pass locale information to the application by default
    env = LC_ALL=en_US.UTF-8

    # Required for Raven/Sentry
    enable-threads  = true

  kc_uwsgi.ini: |
    [uwsgi]

    # load apps in each worker instead of the master
    # This also increases memory consumption
    # lazy-apps = true

    # log requests with a 5xx response
    log-5xx = true
    
    # log requests with a 4xx response
    log-4xx = true

    # disable request logging
    disable-logging = false

    # exit if no app can be loaded
    need-app = true
    
    # desired to ensure all options are known
    strict = false

    # number of threads for each worker
    threads = 2

    # cleanup sockets on worker reload
    vacuum = true

    # directory structure
    chdir           = $(KOBOCAT_SRC_DIR)
    module          = onadata.apps.main.wsgi
    # logto           = $(KOBOCAT_LOGS_DIR)/uwsgi.log

    # process related settings
    master              = true
    harakiri            = $(KC_UWSGI_HARAKIRI)
    worker-reload-mercy = $(KC_UWSGI_WORKER_RELOAD_MERCY)

    # monitoring (use with `uwsgitop :1717`, for example)
    stats = :1717
    memory-report = false

    # Overrideable default of 2 uWSGI processes.
    if-env = KC_UWSGI_WORKERS_COUNT
    workers = %(_)
    endif =
    if-not-env = KC_UWSGI_WORKERS_COUNT
    workers = 2
    endif =

    # # activate cheaper mode
    # if-env = KC_UWSGI_CHEAPER_WORKERS_COUNT
    # cheaper-algo = spare
    # cheaper = %(_)
    # cheaper-initial = %(_)
    # cheaper-step = 2
    # cheaper-overload = 1
    # endif =

    # # stop spawning new workers if total memory consumption grows too large
    # if-env = KC_UWSGI_CHEAPER_RSS_LIMIT_SOFT
    # cheaper-rss-limit-soft = %(_)
    # endif =
    # if-not-env = KC_UWSGI_CHEAPER_RSS_LIMIT_SOFT
    # cheaper-rss-limit-soft = %(2 * 1024 * 1024 * 1024)
    # endif =

    # respawn processes after serving KC_UWSGI_MAX_REQUESTS requests (default 5000)
    if-env = KC_UWSGI_MAX_REQUESTS
    max-requests = %(_)
    max-requests-delta = 2
    endif =

    # respawn individual workers when their memory consumption grows too large
    if-env = KC_UWSGI_RELOAD_ON_RSS_MB
    reload-on-rss = %(_)
    endif =
    if-not-env = KC_UWSGI_RELOAD_ON_RSS_MB
    reload-on-rss = 1024
    endif =

    # respawn workers only after they have run for at leat min-worker-lifetime
    if-env = KC_UWSGI_MIN_WORKER_LIFTIME
    min-worker-lifetime = %(_)
    endif =

    socket          = 0.0.0.0:8001
    buffer-size     = 32768
    listen          = @(/proc/sys/net/core/somaxconn)

    uid             = $(UWSGI_USER)
    gid             = $(UWSGI_GROUP)
    die-on-term     = true

    # Required for Raven/Sentry
    enable-threads  = true

  # Dummy script to drop in place of various init scripts to disable...
  empty_script: |
    #!/bin/bash
    set -e
    echo Skipping $0
